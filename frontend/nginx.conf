# Nginx configuration for The Podcaster front-end container
# ---------------------------------------------------------
# 1. Serves the static single-page application that lives under /usr/share/nginx/html
# 2. Proxies every request that starts with /api/ to the FastAPI backend
# 3. Allows reasonably large uploads (podcast audio can be > 50 MB)

server {
    listen 80;
    server_name localhost;

    # ---------------------------------------------------------------------
    # Increase max upload size – default is 1 MB which is far too small
    # ---------------------------------------------------------------------
    # Allow very large uploads (default limit is 1m). The value is intentionally
    # larger than the configurable back-end limit so that the application, not
    # Nginx, returns a helpful JSON error when the size exceeds
    # ``MAX_UPLOAD_SIZE_MB``.
    client_max_body_size 2g;

    # ---------------------------------------------------------------------
    # 1. Static assets (index.html, script.js, …)
    # ---------------------------------------------------------------------
    root /usr/share/nginx/html;

    location / {
        # SPA – always return index.html so the browser can handle routing
        try_files $uri $uri/ /index.html;
    }

    # ---------------------------------------------------------------------
    # 2. Backend API – proxy to the FastAPI service inside the compose network
    # ---------------------------------------------------------------------
    location /api/ {
        # Forward the request path verbatim to the backend container.  Using a
        # static upstream name ("backend") allows Docker-provided DNS to work
        # without needing an explicit "resolver" directive.  We purposefully
        # omit "$request_uri" here; when a URI is *not* supplied nginx will
        # automatically append the original request URI after the upstream
        # address – this preserves the complete path/query string while
        # avoiding the "no resolver defined" error that occurs when variables
        # are present inside the proxy_pass directive.
        proxy_pass http://backend:8000;

        # Preserve useful headers
        proxy_set_header Host                $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;

        # The backend may take a while for large uploads – disable buffering
        proxy_request_buffering off;
    }
}
